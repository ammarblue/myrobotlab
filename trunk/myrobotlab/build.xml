<!-- <project name="myrobotlab" default="dist" basedir="."> -->
<!--
	Dependencies:
		Windows:
			svnversion.exe from Collabnet
		Linux:
			svnversion	
	
	TODO - make default properties - (incapable of making a release - but all name/bogus values are there
	TODO - build.properties inside repo with comments (static local computer settings username & password etc) - & build path outside
			such that defaults are constructed - something safe to check in but allows easy modification for secure local builds
	TODO : release fullRelease transfer/upload	localBuild(default)
	FIXME - remove copy of jar's and .ivy cache from root - replace with ivy
	resolution or mrl - update (name)
	TODO - use more Ivy
	TODO - removed .ivy cache copy
	TODO - copy the "one and only" serviceData.xml to .myrobotlab directory of the build
	TODO - move haarcascades.zip & lbpcascase.zip to opencv repo dependency
	TODO use Ivy to place "integration" libraries into build directory for GUIService & Service
	
	change  names
	
	flow 
	(clean)
	release <- possibly
	init
	build/compile
	test
	report   (dist)
	post
	doc
	release
	
	References:
	http://onjava.com/pub/a/onjava/2003/12/17/ant_bestpractices.html
	http://www.qasimrasheed.com/post.cfm/eclipse-configure-ant-home
	http://java.dzone.com/articles/how-use-svn-tasks-with-ant
	http://stackoverflow.com/questions/1727616/custom-junit-report
	http://ant.1045680.n5.nabble.com/Mail-task-with-mail-jar-amp-activation-jar-out-of-lib-folder-td3347501.html 
	http://enitsys.sourceforge.net/ant-classloadertask/
	http://www.shinylight.com/2009/10/03/ant-script-to-deploy/
	
-->

<project name="myrobotlab" default="upload" basedir=".">
	<description>http://myrobotlab.org myrobotlab build file</description>
	
	<!-- 
		${build.properties} external build properties - you can override the location of the build properties file
		by using JVM param -Dbuild.properties=newpathlocation or in the ant build call e.g. ant -propertyfile <newPathName> 
	-->
	<property name="build.properties" 				location="build.properties" />
	
	<!-- TODO - junit tests multiple virtualbox os-->
	<!-- set global properties for this build -->
	<property name="src" 				location="src" />
	<property name="build.root.dir" 	location="build" />
	<!--  <property name="build.type" 		value="dev" /> can't set this cause Ant is silly and doesn't have real variables -->
	<property name="dist.root.dir" 		location="dist" />
	
	<property name="resource.root" 		location="./thirdParty/build/resource/root" />
	<property name="junit.jar" 			location="../myrobotlab-tests/thirdParty/lib" />
	<property name="junit.src" 			location="../myrobotlab-tests/src" />
	<property name="thirdParty.build" 	location="./thirdParty/build" />
	<property name="XMLConstants.FEATURE_SECURE_PROCESSING" value="false" />
	
	<property name="svn.base.url" 				value="https://myrobotlab.googlecode.com/svn/" />
	<property name="svn.username" 				value="" />
	<property name="svn.password" 				value="" />
				
<!--  
# == MAIL INFO ==================================================================
# Currently using GMAIL for now.
mail.host=smtp.gmail.com
mail.port=465
mail.subjectalert=[STAGING ANT Build] Test build
mail.ssl=yes
mail.username=USERNAME
mail.password=PASSWORD
mail.from=someone@somewhere.com
mail.to=someone@somewhere.com
-->
	<property name="mail.host" 				value="smtp.gmail.com" />
	<property name="mail.port" 				value="464" />
	<property name="mail.subjectalert" 		value="Test build" />
	<property name="mail.ssl" 				value="yes" />
	<property name="mail.username" 			value="" /><!-- get from local properties file -->
	<property name="mail.password" 			value="" /><!-- get from local properties file -->
	<property name="mail.from" 				value="build@myrobotlab.org" />
	<property name="mail.tolist" 			value="" /><!-- get from local properties file -->
	<property environment="env" />
	<property name="gc.upload.userid" 		value="${env.gc.upload.userid}"/>  
	<property name="gc.upload.password" 	value="${env.gc.upload.password}"/>  
	
	<exec executable="svn" dir="." outputproperty="svn.comment">
     <arg line="propget --revprop svn:log -r HEAD"/>
	</exec>
	<echo>The svn comment is: ${svn.comment}</echo>
		
	<!-- class path for build -->
	<path id="compile.classpath">
		<fileset dir="./thirdParty/repo">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<!-- class path for testing -->
	<path id="compile.classpath.junit">
		<fileset dir="./thirdParty/repo">
			<include name="**/*.jar" />
		</fileset> <!-- FIXME - this is WRONG it will include mutlipe versions since multiple versions exist in the repo - use Ivy -->
		<fileset dir="../myrobotlab-tests/thirdParty/lib">
			<include name="**/*.jar" />
		</fileset>
	</path>
	
	<path id="ant_ext.classpath">
 		<fileset dir="./thirdParty/build/ant_ext">     
  		<include name="**/*.jar" />
 		</fileset>
	</path>
	
	<typedef resource="org/tigris/subversion/svnant/svnantlib.xml" classpathref="ant_ext.classpath" />
	
	<!-- needed to get mail to work -->
	<taskdef name="classloadertask" classname="org.apache.tools.ant.taskdefs.ClassloaderTask" classpathref="ant_ext.classpath"/> 
	<classloadertask classpathref="ant_ext.classpath" loader="thread"/> 
		
	<target name="svnbranch" depends="init" description="creates a new branch for individual project using svnant task">    

		<property name="svn.branch.message" value="Creating new branch for trunk with new branch name ${label} "/>
		<!-- TODO make message input & possibly another friendly release name {squirty, zippy, breeze, ...} -->
  		<property name="src.url"  value="${svn.base.url}/trunk/"/>
		<property name="dest.url" value="${svn.base.url}/branches/${label}"/>
		
		<echo message="${svn.branch.message}"/>
		<echo message="${src.url}"/>
		<echo message="${dest.url}"/>

		<svn javahl="${svnant.javahl}" svnkit="${svnant.svnkit}"   
		        username="${svn.username}" password="${svn.password}">
		<copy srcUrl="${src.url}" destUrl="${dest.url}" message="${svn.branch.message}"/>       								              
		</svn>
	</target>
	
	<target name="release" description="for releases - will branch the repo and post the artifacts">
	    <input message="Please enter version:" addproperty="targetVersion" />
	    <echo message="targetVersion: ${targetVersion}" />	    
		<property name="build.type" 		value="release" />
		<antcall target="init" />
	</target>
	

	<!-- build the appropriate label -->
	<target name="init">
	    <!-- load file properties -->
	     <loadproperties srcFile="${build.properties}"/>
	    <!-- default values set if not set in already in build.properties or "release" -->
	    <condition property="build.type" value="dev">
    		<not>  
        		<isset property="build.type"/>
    		</not>
		</condition>
	    <condition property="targetVersion" value="myrobotlab">
    		<not>  
        		<isset property="targetVersion"/>
    		</not>
		</condition>
	    	
    	<echo message="build.type=${build.type}"/>			
    	<echo message="targetVersion=${targetVersion}"/>			
    		    
		<tstamp />
		<!-- Create the time stamp -->
		<exec executable="svnversion" outputproperty="repository.revision" />
		<echo message="repository revision is ${repository.revision}" />
		<tempfile property="temp.file"/>
		<!-- a lot of work just to remove a possible semi-colon - which is an illegal
		character for a windows file system -->
		<echo message="${targetVersion}.${repository.revision}" file="${temp.file}" />
		<loadfile srcfile="${temp.file}" property="rev">
			<filterchain>
				<replaceregex pattern=":" replace="." />
			</filterchain>
		</loadfile>
		<delete file="${temp.file}" />
		<echo message="rev ${rev}" />
		<property name="label" value="${rev}.${DSTAMP}.${TSTAMP}" />
		<echo message="label ${label}" />

		<!-- Create the build directory structure used by compile -->
		<!-- TODO set all subsequent directories or resources with appended label -->
		<!-- TODO branch on the label in release -->
		
		<property name="build"	location="${build.root.dir}/${label}"/>
		<property name="dist"	location="${dist.root.dir}/${label}"/>
		<property name="report.dir" 		location="report/${label}" />
				
		<mkdir dir="${build.root.dir}" />
		<mkdir dir="${build}" />
		<mkdir dir="${dist.root.dir}" />
		<mkdir dir="${dist}" />
		
		<echo message="uid ${env.gc.upload.userid}"/>
		<echo message="pwd ${env.gc.upload.password}"/>
		
	</target>

	
	<target name="compile" depends="init" description="compile the source ">
	    <echo>compile start</echo>
		<!-- compile the java code from ${src} into ${build} -->
		<javac srcdir="${src}" destdir="${build}" includeantruntime="false">
			<exclude name="org/myrobotlab/service/Android.java" />
			<exclude name="org/myrobotlab/service/ArduinoBT.java" />
			<classpath refid="compile.classpath" />
		</javac>

		<!-- copy resource.root -->
		<copy todir="${build}/resource">
			<fileset dir="${src}/resource" />
		</copy>

		<echo file="${build}/resource/version.txt">${label}</echo>

		<copy todir="${dist}">
			<fileset dir="${resource.root}" />
		</copy>

		<copy file="./thirdParty/repo/serviceData.xml" todir="${dist}/.myrobotlab" />

		<!-- FIXME - use Ivy to get the files there ! filebase or url resolver -->
	    <echo>compile end</echo>
	</target>

	<target name="dist" depends="compile" description="generate the distribution">
		<!-- Create the distribution directory -->
		<mkdir dir="${dist}" />

		<jar jarfile="${dist}/libraries/jar/myrobotlab.jar" basedir="${build}">
			<!-- excludes="org/myrobotlab/boot/" -->
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<!-- section name="myrobotlab" -->
				<section name="compile">
					<attribute name="Specification-Title" value="myrobotlab" />
					<attribute name="Specification-Version" value="${targetVersion}" />
					<attribute name="Specification-Vendor" value="myrobotlab" />
					<attribute name="Implementation-Title" value="myrobotlab" />
					<attribute name="Implementation-Version" value="${label}" />
					<attribute name="Implementation-Vendor" value="myrobotlab.org" />
				</section>
			</manifest>
		</jar>
		<chmod file="${dist}/*.sh" perm="ugo+rx"/>
		<zip destfile="${dist.root.dir}/${label}.zip"
   			basedir="${dist.root.dir}"
   			includes="${label}/**" />
	</target>

	<!-- scp updates begin -->
	<target name="scp.maahr" depends="dist">
		<input message="Please enter maahr userid:" addproperty="maahr.scp.userid" />
		<input message="Please enter maahr password:" addproperty="maahr.scp.password" />
		<scp file="${dist}/libraries/jar/myrobotlab.jar" todir="${maahr.scp.userid}:${maahr.scp.password}@maahr:/home/gperry/releases/myrobotlab-0013" />
	</target>
	
	<target name="clean" description="clean up">
		<!-- Delete the ${build} and ${dist} directory trees -->
		<delete dir="${build}" />
		<delete dir="${dist}" />
	</target>

	<target name="junit" depends="dist">
		<!-- FIXME - copy over serviceData.xml & ivy repo - root?  -->

		<copy todir="${build}/resource">
			<fileset dir="${src}/resource" />
		</copy>
		
		<!-- compile tests -->
		<javac srcdir="${junit.src}" destdir="${build}" includeantruntime="false">
			<classpath>
				<fileset dir="${dist}/libraries/jar">
					<include name="myrobotlab.jar" />
				</fileset>
				<path refid="compile.classpath.junit" />
			</classpath>
		</javac>

		<!-- run tests - Services will need to be loaded if they don't come 
			 with the default mrl load ie. if they have dependencies on the repo -->
		<mkdir dir="${report.dir}" />
		<junit printsummary="yes" haltonfailure="yes" > <!-- haltonfailure to bubble up the failure info to ant & jenkins -->
			<sysproperty key="java.awt.headless" value="true"/><!-- any junit tests would fail running on jenkins with gui components -->		    
		    <classpath>
				<fileset dir="${dist}/libraries/jar">
					<include name="**/*.jar" />
				</fileset>
				<pathelement path="${junit.jar}/junit-4.4.jar" />
				<!-- pathelement path="${dist}/${label}/libraries/jar/myrobotlab.jar"/ -->
				<pathelement location="${build}" /> <!-- FIXME - I should be able to pick everything up from the libraries include ?!?  -->
			</classpath>
			<formatter type="xml" />

			<batchtest fork="yes" todir="${report.dir}">
				<fileset dir="${junit.src}" includes="**/test/**/*.java" />
			</batchtest>
		</junit>
			<!--  <classloaderreport/> -->
		</target>

	<target name="report" depends="junit">
		<junitreport todir="${report.dir}">
			<fileset dir="${report.dir}" includes="TEST-*.xml" />
			<report todir="${report.dir}" format="noframes">
			</report>
		</junitreport>
	</target>
	
	<target name="mail" depends="report">	    
		<mail mailhost="${mail.host}" mailport="${mail.port}" subject="${mail.subjectalert}" ssl="${mail.ssl}" 
		    user="${mail.username}" password="${mail.password}" tolist="${mail.tolist}">
			<from address="${mail.from}"/>      
			<!--  <to address="${mail.to}"/> -->
			<message>The nightly build has completed</message>
  			<attachments>
    			<fileset dir="${report.dir}">
      				<include name="**/*.html"/>
    			</fileset>
  			</attachments>
		</mail>
 	</target>
	
	<!-- thankfully created in Eclipse -->
	<target name="javadoc">
	    
		<javadoc access="public" packagenames="org.myrobotlab.*" author="true" destdir="javadoc" 
			doctitle="myrobotlab" nodeprecated="false" nodeprecatedlist="false" noindex="false" 
			nonavbar="false" notree="false" source="1.6" sourcepath="src" splitindex="true" use="true" version="true">
			<classpath>
				<fileset dir="${dist}/libraries/jar">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javadoc>
	</target>

	<target name="upload" depends="report, javadoc" description="upload to google code" >
	    <!-- 
		<input message="Please enter upload userid:" addproperty="gc.upload.userid" />
		<input message="Please enter upload password:" addproperty="gc.upload.password" />
		 -->
		<taskdef classname="net.bluecow.googlecode.ant.GoogleCodeUploadTask" name="gcupload" classpathref="ant_ext.classpath"/>
		<!--   gcupload username="${env.gc.upload.userid}" password="${env.gc.upload.password}" projectname="myrobotlab" verbose="true" filename="${dist.root.dir}/${label}/myrobotlab.jar" targetfilename="myrobotlab.jar" summary="latest jar for bleeding edge updates" labels="OpSys-All" -->
		<gcupload username="${env.gc.upload.userid}" password="${env.gc.upload.password}" projectname="myrobotlab" verbose="true" filename="${dist.root.dir}/${label}.zip" targetfilename="${label}.zip" summary="complete package - ${svn.comment}" labels="OpSys-All" />
	</target>

		<!-- TODO - upload javadoc, check in javadoc? -->

	<!-- how to call a class directly	
	<target name="run" depends="compile">
	  <java fork="true" failonerror="yes" classname="Addition" classpath="build">  
	  <arg line=""/>
	  </java>
	  </target>
-->
</project>