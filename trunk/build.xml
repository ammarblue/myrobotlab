<!-- <project name="myrobotlab" default="dist" basedir="."> -->

<!--
	Dependencies:
		Windows:
			svnversion.exe from Collabnet
		Linux:
			svnversion			
-->

<project name="myrobotlab" default="uploadJar" basedir=".">
	<description>
		http://myrobotlab.org myrobotlab build file
    </description>

	<!-- TODO - junit tests multiple virtualbox os-->
	<!-- set global properties for this build -->
	<property name="src" location="src"/>
	<property name="build" location="build"/>
	<property name="dist"  location="dist" />
	<property name="report.dir"  location="report" />
	<property name="thirdParty.lib"  location="./thirdParty/lib" />
	<property name="XMLConstants.FEATURE_SECURE_PROCESSING" value="false" />
	

	<path id="compile.classpath">
		<fileset dir="./thirdParty/lib">
			<include name="*.jar"/>
		</fileset>
	</path>
	
	<target name="init">
		<!-- Create the time stamp -->
		<tstamp/>

		<exec executable="svnversion" outputproperty="repository.revision" />
		<echo message="Repository revision is ${repository.revision}" />

		<!-- replace file="${src}/org/myrobotlab/service/GUIService.java" token="@@@svnversion@@@" value="${repository.revision}"/>
		<replace file="${src}/org/myrobotlab/service/GUIService.java" token="@@@tstamp@@@" value="${DSTAMP}"/>
		<replace file="${src}/org/myrobotlab/service/Invoker.java" token="@@@svnversion@@@" value="${repository.revision}"/>
		<replace file="${src}/org/myrobotlab/service/Invoker.java" token="@@@tstamp@@@" value="${DSTAMP}"/ -->

		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${build}"/>
	</target>

	<!-- svn javahl="${javahl}">
	<checkout url="${urlRepos}" destPath="workingcopy" />
	</svn -->

	<target name="compile" depends="init"
        description="compile the source " >
		<!-- Compile the java code from ${src} into ${build} -->
		<javac srcdir="${src}" destdir="${build}" includeantruntime="false">
			<classpath refid="compile.classpath"/>
		</javac>
		<!-- copy resources -->
		<mkdir dir="${build}/resource"/> 
		<mkdir dir="${build}/haarcascades"/> 
		
		<copy todir="${build}/resource">
		    <fileset dir="${src}/resource"/>
		</copy>
		
		<echo file="${build}/resource/version.txt">${repository.revision} ${DSTAMP} ${TSTAMP}</echo>

		<!-- FIXME - windows can't support all repo revision labels - specifically ":" - build will fail -->
		<copy todir="${dist}/${repository.revision}.${DSTAMP}.${TSTAMP}/bin">
		    <fileset dir="./thirdParty/bin"/>
		</copy>

		<copy todir="${dist}/${repository.revision}.${DSTAMP}.${TSTAMP}/haarcascades">
		    <fileset dir="./haarcascades"/>
		</copy>
		
		<copy file="./thirdParty/lib/jgraphx.jar" todir="${dist}/${repository.revision}.${DSTAMP}.${TSTAMP}/lib"/>
		<copy file="./thirdParty/lib/jna.jar" todir="${dist}/${repository.revision}.${DSTAMP}.${TSTAMP}/lib"/>
		<copy file="./thirdParty/lib/log4j-1.2.14.jar" todir="${dist}/${repository.revision}.${DSTAMP}.${TSTAMP}/lib"/>
		<copy file="./thirdParty/lib/RXTXcomm.jar" todir="${dist}/${repository.revision}.${DSTAMP}.${TSTAMP}/lib"/>
		<copy file="./thirdParty/lib/javacpp.jar" todir="${dist}/${repository.revision}.${DSTAMP}.${TSTAMP}/lib"/>
		<copy file="./thirdParty/lib/javacv.jar" todir="${dist}/${repository.revision}.${DSTAMP}.${TSTAMP}/lib"/>
		<copy file="./thirdParty/lib/javacv-linux-x86.jar" todir="${dist}/${repository.revision}.${DSTAMP}.${TSTAMP}/lib"/>
		<copy file="./thirdParty/lib/javacv-windows-x86.jar" todir="${dist}/${repository.revision}.${DSTAMP}.${TSTAMP}/lib"/>
		<copy file="./thirdParty/lib/javacv-macosx-x86_64.jar" todir="${dist}/${repository.revision}.${DSTAMP}.${TSTAMP}/lib"/>

		<!-- copy file="./thirdParty/lib/javacv-windows-x86_64.jar" todir="${dist}/${repository.revision}.${DSTAMP}.${TSTAMP}/lib"/ -->
		<!-- copy file="./thirdParty/lib/javacv-linux-x86_64.jar" todir="${dist}/${repository.revision}.${DSTAMP}.${TSTAMP}/lib"/ -->
		

		<copy file="myrobotlab.bat" todir="${dist}/${repository.revision}.${DSTAMP}.${TSTAMP}"/>
		<!-- permissions are not preserved -->
		<copy file="myrobotlab.sh" todir="${dist}/${repository.revision}.${DSTAMP}.${TSTAMP}"/>
		<!-- exec executable="cp" >  Why would you do this ??? not OS dependent !
			<arg value="myrobotlab.sh" />
		    <arg value="${dist}/${repository.revision}.${DSTAMP}.${TSTAMP}" />
		</exec -->
		<copy file="LICENSE.txt" todir="${dist}/${repository.revision}.${DSTAMP}.${TSTAMP}"/>
		
	</target>

	<target name="dist" depends="compile" description="generate the distribution" >
		<!-- Create the distribution directory -->
		<mkdir dir="${dist}"/>
		<mkdir dir="${dist}/${repository.revision}.${DSTAMP}.${TSTAMP}"/>
		<mkdir dir="${dist}/${repository.revision}.${DSTAMP}.${TSTAMP}/lib"/>
		<mkdir dir="${dist}/${repository.revision}.${DSTAMP}.${TSTAMP}/bin"/>
		
		<!-- Put everything in ${build} into the myrobotlab-${DSTAMP}.jar file -->
		<jar jarfile="${dist}/${repository.revision}.${DSTAMP}.${TSTAMP}/myrobotlab.jar" basedir="${build}">
			<manifest>
				<attribute name="Built-By" value="${user.name}"/>
				<!-- section name="myrobotlab" -->
				<section name="compile">
					<attribute name="Specification-Title" value="myrobotlab"/>
					<attribute name="Specification-Version" value="${repository.revision} ${DSTAMP} ${TSTAMP}"/>
					<attribute name="Specification-Vendor" value="myrobotlab"/>
					<attribute name="Implementation-Title" value="myrobotlab"/>
					<attribute name="Implementation-Version" value="${repository.revision} ${DSTAMP} ${TSTAMP}"/>
					<attribute name="Implementation-Vendor" value="myrobotlab.org"/>
				</section>
			</manifest>
		</jar>
		<!-- scp copies here -->
	</target>
		 
	<target name="clean" description="clean up" >
		<!-- Delete the ${build} and ${dist} directory trees -->
		<delete dir="${build}"/>
		<delete dir="${dist}"/>
	</target>

	<property name="report"  value="${build}/junitreport"/>
	<property name="application"  value="${dist}/${repository.revision}.${DSTAMP}.${TSTAMP}/myrobotlab.jar"/>
	
	<!-- target name="junit" depends="dist">
	        <mkdir dir="${report}"/>
	        <junit printsummary="yes">
	            <classpath>
	                <path refid="compile.classpath"/>
	                <path refid="application"/>
	            	</classpath>
	            
	            <formatter type="xml"/>
	            
	            <batchtest fork="yes" todir="${report}">
	                <fileset dir="${src}" includes="*Test.java"/>
	            </batchtest>
	        </junit>
	    </target -->
	<!--
	<target name="junit" depends="dist">
	<property name="testclass" value="junitTest.HelloWorldTest"/>
	<java classname="junit.textui.TestRunner">
	<arg value="${testclass}"/>
	<classpath>
		<fileset dir="C:/JDeveloper"/>
		<includes path="**/*.jar" />
	</classpath>
	</java>
	</target>

	 <target name="junitreport" depends="junit">
	        <junitreport todir="${report}">
	            <fileset dir="${report}" includes="TEST-*.xml"/>
	            <report todir="${report}"/>
	        </junitreport>
	 </target>
-->


	
	<target name="uploadJar" depends="junit" description="upload to google code">
	<taskdef classname="net.bluecow.googlecode.ant.GoogleCodeUploadTask" 
		classpath="${src}/../thirdParty/build/ant-googlecode-0.0.3.jar" name="gcupload"/>
	<gcupload 
	        username="" 
	        password="" 
	        projectname="myrobotlab" 
		    verbose="true"
	        filename="${dist}/${repository.revision}.${DSTAMP}.${TSTAMP}/myrobotlab.jar" 
	        targetfilename="myrobotlab.${DSTAMP}.${TSTAMP}.jar"
	        summary="latest build of myrobotlab.jar r${repository.revision}"
	        labels="OpSys-All" />
	</target>
	
	  <target name="junit" depends="dist">
	        <mkdir dir="${report.dir}"/>
	        <junit printsummary="yes">
	            <classpath>
	        		<fileset dir="${thirdParty.lib}">
	        			<include name="*.jar"/>
	        		</fileset>
	            	<pathelement path="${thirdParty.lib}/junit-4.4.jar"/>
	            	<!-- pathelement path="${dist}/${repository.revision}.${DSTAMP}.${TSTAMP}/myrobotlab.jar"/ -->
	            	<pathelement location="${build}" />
	            </classpath>
	            
	            <formatter type="xml"/>
	            
	            <batchtest fork="yes" todir="${report.dir}">
	                <fileset dir="${src}" includes="**/junit/*Test.java"/>
	            </batchtest>
	        </junit>
	    </target>
	    
	    <target name="junitreport" depends="junit">
	        <junitreport>
	            <fileset dir="${report.dir}" includes="TEST-*.xml"/>
	            <report todir="${report.dir}" format="noframes">
	        	</report>
	        </junitreport>
	    </target>
	
	<!-- thankfully created in Eclipse -->
	<target name="javadoc">
	        <javadoc access="public" 
	        		packagenames="org.myrobotlab.*" 
	        		author="true" 
	        	 	destdir="javadoc" 
	        		doctitle="myrobotlab" 
	        		nodeprecated="false" 
	        		nodeprecatedlist="false" 
	        		noindex="false" 
	        		nonavbar="false" 
	        		notree="false" 
	        	 	source="1.6" 
	        		sourcepath="src" 
	        		splitindex="true" 
	        		use="true" 
	        		version="true">
	        	<classpath>
	        		<fileset dir="./thirdParty/lib">
	        			<include name="*.jar"/>
	        		</fileset>	        	
	        	</classpath>
	        	</javadoc>
		
	    </target>
	
<!-- TODO - upload javadoc, check in javadoc? -->	
	
<!-- how to call a class directly	
	<target name="run" depends="compile">
	  <java fork="true" failonerror="yes" classname="Addition" classpath="build">  
	  <arg line=""/>
	  </java>
	  </target>
-->	
</project>